(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> "
p3
sS'layer'
p4
S'/home/timmy/Desktop/CS183/web2py/applications/csFinal183/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    #Testing123\n    #Need to add something to store search variable in here\n    if auth.user is None:\n        my_username = \'\'\n    else:\n        my_username = auth.user.username\n    form = SQLFORM.factory(\n                   Field("username"),\n                   formstyle=\'divs\',\n                   submit_button="Search"\n    )\n    if form.process().accepted:\n        #Data from SQLFORM\n        username = form.vars.username\n        #conditions\n        if username:\n            redirect(URL(\'default\', \'user_profile\', args=[username]))\n    return dict(form=form, my_username=my_username)\n\ndef submit_a_listing():\n    if auth.user is None:\n        my_username = \'\'\n    else:\n        my_username = auth.user.username\n    response.flash = T("Hello World")\n    return dict(my_username=my_username)\n\ndef view_listing():\n    if auth.user is None:\n        my_username = \'\'\n    else:\n        my_username = auth.user.username\n    response.flash = T("Hello World")\n    return dict(my_username=my_username)\n\ndef search():\n    if auth.user is None:\n        my_username = \'\'\n    else:\n        my_username = auth.user.username\n    form = SQLFORM.factory(\n                   Field("username"),\n                   formstyle=\'divs\',\n                   submit_button="Search"\n    )\n    if form.process().accepted:\n        #Data from SQLFORM\n        username = form.vars.username\n        #conditions\n        if username:\n            redirect(URL(\'default\', \'profile\', args=[username]))\n    return dict(form=form, my_username=my_username)\n\n\n\ndef profile():\n    my_first = auth.user.first\n    my_last = auth.user.last\n    my_college = auth.user.college\n\n\n    if auth.user is None:\n        my_username = \'\'\n    else:\n        my_username = auth.user.username\n    user_name = request.args(0)\n    user_images = db(db.auth_user.username == user_name).select()\n    for row in db().select(db.auth_user.ALL):\n        if row.username == user_name:\n            print "Name found"\n            found = 1\n            break\n        else:\n            print "No username found"\n            found = 0\n    if found == 1:\n        print "print out form"\n    else:\n        print "no username founded, print out no such username try again"\n\n\n    return dict(user_name=user_name, user_images=user_images, my_username=my_username)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    if request.args(0) == \'profile\':\n        db.auth_user.username.readable = db.auth_user.username.writable = False\n        db.auth_user.email.readable = db.auth_user.email.writable = False\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(profile)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/timmy/Desktop/CS183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/timmy/Desktop/CS183/web2py/applications/csFinal183/controllers/default.py", line 144, in <module>\n  File "/home/timmy/Desktop/CS183/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/timmy/Desktop/CS183/web2py/applications/csFinal183/controllers/default.py", line 75, in profile\n    my_first = auth.user.first\n  File "/home/timmy/Desktop/CS183/web2py/gluon/packages/dal/pydal/objects.py", line 90, in __getattr__\n    raise AttributeError\nAttributeError\n'
p11
s.