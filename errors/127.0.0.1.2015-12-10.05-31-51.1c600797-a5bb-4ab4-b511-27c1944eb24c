(dp1
S'output'
p2
S"<class 'gevent.hub.LoopExit'> This operation would block forever"
p3
sS'layer'
p4
S'/home/timmy/Desktop/CS183/web2py/applications/csFinal183/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom gluon import utils as gluon_utils\nimport json\nimport chats\nimport time\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    #Testing123\n    #Need to add something to store search variable in here\n    if auth.user is None:\n        my_username = \'\'\n    else:\n        my_username = auth.user.username\n    form = SQLFORM.factory(\n                   Field("username"),\n                   formstyle=\'divs\',\n                   submit_button="Search"\n    )\n    if form.process().accepted:\n        #Data from SQLFORM\n        username = form.vars.username\n        #conditions\n        if username:\n            redirect(URL(\'default\', \'user_profile\', args=[username]))\n    return dict(form=form, my_username=my_username)\n\ndef chat():\n    return chats.index(db)\n\n@auth.requires_signature()\ndef message_new():\n    return chats.message_new(db)\n\n@auth.requires_signature()\ndef message_updates():\n    # need to unlock the session when using\n    # session file, should not be need it when\n    # using session in db, or in a cookie\n    session._unlock(response)\n    return chats.message_updates(db)\n\n@auth.requires_signature()\ndef load_messages():\n    """Loads all messages for the user."""\n    rows = db(db.post.author == auth.user_id).select()\n    d = {r.message_id: {\'message_content\': r.message_content,\n                        \'is_draft\': r.is_draft}\n         for r in rows}\n    return response.json(dict(msg_dict=d))\n\n@auth.requires_signature()\ndef add_msg():\n    db.post.update_or_insert((db.post.message_id == request.vars.msg_id),\n            message_id=request.vars.msg_id,\n            message_content=request.vars.msg,\n            is_draft=json.loads(request.vars.is_draft))\n    return "ok"\n\ndef submit_a_listing():\n    if auth.user is None:\n        my_username = \'\'\n    else:\n        my_username = auth.user.username\n    form = SQLFORM(db.bboard)\n    if form.process().accepted:\n        # Successful processing.\n        session.flash = T("inserted")\n        redirect(URL(\'default\', \'view_listing\'))\n    return dict(my_username=my_username, form=form)\n\n@auth.requires_login()\ndef delete():\n    p = db.bboard(request.args(0)) or redirect(URL(\'default\', \'index\'))\n    if p.user_id != auth.user_id:\n        session.flash = T(\'Not authorized.\')\n        redirect(URL(\'default\', \'index\'))\n    db(db.bboard.id == p.id).delete()\n    redirect(URL(\'default\', \'view_listing\'))\n\n@auth.requires_login()\ndef edit():\n    if auth.user is None:\n        my_username = \'\'\n    else:\n        my_username = auth.user.username\n    p = db.bboard(request.args(0)) or redirect(URL(\'default\', \'index\'))\n    if p.user_id != auth.user_id:\n        session.flash = T(\'Not authorized.\')\n        redirect(URL(\'default\', \'index\'))\n    form = SQLFORM(db.bboard, record=p)\n    if form.process().accepted:\n        session.flash = T(\'Updated\')\n        redirect(URL(\'default\', \'view_listing\'))\n    return dict(form=form, my_username=my_username)\n\ndef view_listing():\n    if auth.user is None:\n        my_username = \'\'\n    else:\n        my_username = auth.user.username\n\n    q = db.bboard\n\n    def generate_del_button(row):\n        # If the record is ours, we can delete it.\n        b = \'\'\n        if auth.user_id == row.user_id:\n            b = A(\'Delete\', _class=\'btn\', _href=URL(\'default\', \'delete\', args=[row.id]))\n        return b\n\n    def generate_edit_button(row):\n        # If the record is ours, we can delete it.\n        b = \'\'\n        if auth.user_id == row.user_id:\n            b = A(\'Edit\', _class=\'btn\', _href=URL(\'default\', \'edit\', args=[row.id]))\n        return b\n\n    def shorten_post(row):\n        return row.bbmessage[:50] + \'...\'\n\n    # Creates extra buttons.\n\n    links = [\n        dict(header=\'\', body = generate_del_button),\n        dict(header=\'\', body = generate_edit_button),\n        ]\n\n    if len(request.args) == 0:\n        # We are in the main index.\n        links.append(dict(header=\'Post\', body = shorten_post))\n        db.bboard.bbmessage.readable = False\n\n    form = SQLFORM.grid(q,\n        fields=[db.bboard.user_id, db.bboard.date_posted,\n                db.bboard.category, db.bboard.title,\n                db.bboard.bbmessage],\n        editable=False, deletable=False,\n        links=links,\n        paginate=5,\n        csv=False,\n        create=False\n        )\n    draft_id = gluon_utils.web2py_uuid()\n    return dict(my_username=my_username,form=form,draft_id=draft_id)\n\ndef search():\n    if auth.user is None:\n        my_username = \'\'\n    else:\n        my_username = auth.user.username\n    form = SQLFORM.factory(\n                   Field("username"),\n                   formstyle=\'divs\',\n                   submit_button="Search"\n    )\n    if form.process().accepted:\n        #Data from SQLFORM\n        username = form.vars.username\n        #conditions\n        if username:\n            redirect(URL(\'default\', \'profile\', args=[username]))\n    return dict(form=form, my_username=my_username)\n\n\n\ndef profile():\n\n    if auth.user is None:\n        my_username = \'\'\n    else:\n        my_username = auth.user.username\n    user_name = request.args(0)\n    #Note: Profile Details\n    my_first = db(db.auth_user.username == user_name).select(db.auth_user.first_name)\n    my_last = db(db.auth_user.username == user_name).select(db.auth_user.last_name)\n    my_college = db(db.auth_user.username == user_name).select(db.auth_user.College)\n    my_major = db(db.auth_user.username == user_name).select(db.auth_user.Major)\n    my_gender = db(db.auth_user.username == user_name).select(db.auth_user.Gender)\n    ##############################\n\n\n    user_images = db(db.auth_user.username == user_name).select()\n    for row in db().select(db.auth_user.ALL):\n        if row.username == user_name:\n            print "Name found"\n            found = 1\n            break\n        else:\n            print "No username found"\n            found = 0\n    if found == 1:\n        print "print out form"\n    else:\n        print "no username founded, print out no such username try again"\n    draft_id = gluon_utils.web2py_uuid()\n    return dict(user_name=user_name, user_images=user_images, my_username=my_username,\n                my_first=my_first, my_last=my_last, my_college=my_college, my_major=my_major,\n                my_gender=my_gender, draft_id=draft_id)\n\ndef comment():\n\n    return\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    if request.args(0) == \'profile\':\n        db.auth_user.username.readable = db.auth_user.username.writable = False\n        db.auth_user.email.readable = db.auth_user.email.writable = False\n    return dict(form=auth())\n\ndef users():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    if request.args(0) == \'profile\':\n        db.auth_user.username.readable = db.auth_user.username.writable = False\n        db.auth_user.email.readable = db.auth_user.email.writable = False\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(message_updates)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/timmy/Desktop/CS183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/timmy/Desktop/CS183/web2py/applications/csFinal183/controllers/default.py", line 281, in <module>\n  File "/home/timmy/Desktop/CS183/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/timmy/Desktop/CS183/web2py/gluon/tools.py", line 3774, in f\n    return action(*a, **b)\n  File "/home/timmy/Desktop/CS183/web2py/applications/csFinal183/controllers/default.py", line 55, in message_updates\n    return chats.message_updates(db)\n  File "applications/csFinal183/modules/chats.py", line 65, in message_updates\n    new_message_event.wait()\n  File "/home/timmy/anaconda/lib/python2.7/site-packages/gevent/event.py", line 77, in wait\n    result = self.hub.switch()\n  File "/home/timmy/anaconda/lib/python2.7/site-packages/gevent/hub.py", line 331, in switch\n    return greenlet.switch(self)\nLoopExit: This operation would block forever\n'
p11
s.